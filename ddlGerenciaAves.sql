-- Tabela de Lotes de Aves
CREATE TABLE TAB_LOTE_AVES (
    ID_LOTE NUMBER PRIMARY KEY,
    DESCRICAO VARCHAR2(100) NOT NULL,
    DATA_ENTRADA DATE NOT NULL,
    QUANTIDADE_INICIAL NUMBER NOT NULL
);

-- Tabela de Pesagem
CREATE TABLE TAB_PESAGEM (
    ID_PESAGEM NUMBER PRIMARY KEY,
    ID_LOTE_FK NUMBER,
    DATA_PESAGEM DATE NOT NULL,
    PESO_MEDIO NUMBER(10, 2) NOT NULL,
    QUANTIDADE_PESADA NUMBER NOT NULL,
    CONSTRAINT FK_PESAGEM_LOTE FOREIGN KEY (ID_LOTE_FK) REFERENCES TAB_LOTE_AVES(ID_LOTE)
);

-- Tabela de Mortalidade
CREATE TABLE TAB_MORTALIDADE (
    ID_MORTALIDADE NUMBER PRIMARY KEY,
    ID_LOTE_FK NUMBER,
    DATA_MORTALIDADE DATE NOT NULL,
    QUANTIDADE_MORTA NUMBER NOT NULL,
    OBSERVACAO VARCHAR2(255),
    CONSTRAINT FK_MORTALIDADE_LOTE FOREIGN KEY (ID_LOTE_FK) REFERENCES TAB_LOTE_AVES(ID_LOTE)
);

-- Sequências para gerar IDs automaticamente
CREATE SEQUENCE SEQ_LOTE_AVES;
CREATE SEQUENCE SEQ_PESAGEM;
CREATE SEQUENCE SEQ_MORTALIDADE;

-- Triggers para usar as sequências (opcional, mas recomendado)
CREATE OR REPLACE TRIGGER TRG_LOTE_AVES_PK
BEFORE INSERT ON TAB_LOTE_AVES
FOR EACH ROW
BEGIN
  SELECT SEQ_LOTE_AVES.NEXTVAL
  INTO   :new.ID_LOTE
  FROM   dual;
END;
/

CREATE OR REPLACE TRIGGER TRG_PESAGEM_PK
BEFORE INSERT ON TAB_PESAGEM
FOR EACH ROW
BEGIN
  SELECT SEQ_PESAGEM.NEXTVAL
  INTO   :new.ID_PESAGEM
  FROM   dual;
END;
/

CREATE OR REPLACE TRIGGER TRG_MORTALIDADE_PK
BEFORE INSERT ON TAB_MORTALIDADE
FOR EACH ROW
BEGIN
  SELECT SEQ_MORTALIDADE.NEXTVAL
  INTO   :new.ID_MORTALIDADE
  FROM   dual;
END;
/